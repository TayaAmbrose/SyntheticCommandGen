{
  "technique_id": "T1597",
  "platform": "Linux",
  "shell": "Python",
  "command": "import os,sys,json,ssl,urllib.request,urllib.parse,base64; d=os.getenv('TARGET_DOMAIN','example.com'); aid=os.getenv('CENSYS_API_ID'); sec=os.getenv('CENSYS_API_SECRET'); \nif not (aid and sec): print(json.dumps({'source':'censys','query':d,'error':'missing CENSYS_API_ID or CENSYS_API_SECRET'}), file=sys.stderr); sys.exit(1); \nurl='https://search.censys.io/api/v2/hosts/search'; q={'q':'services.tls.certificates.leaf_data.names: '+d,'per_page':10}; data=json.dumps(q).encode('utf-8'); auth='Basic '+base64.b64encode((aid+':'+sec).encode()).decode(); hdr={'Authorization':auth,'Content-Type':'application/json','Accept':'application/json','User-Agent':'t1597-demo/1.0'}; ctx=ssl.create_default_context(); \ntry:\n    r=urllib.request.urlopen(urllib.request.Request(url,data=data,headers=hdr,method='POST'),timeout=25,context=ctx); print(json.dumps({'source':'censys','query':d,'data':json.loads(r.read().decode('utf-8'))}, ensure_ascii=False));\nexcept Exception as e:\n    print(json.dumps({'source':'censys','query':d,'error':str(e)}), file=sys.stderr); sys.exit(2)",
  "explanation": "Performs a targeted Censys v2 hosts search (closed-source) using Basic Auth, limiting results and posting a JSON query for TLS names matching the domain.",
  "rationale_steps": [
    "Authenticate to a commercial research database (Censys) using API ID/secret.",
    "Submit a structured query for hosts with certificates referencing the domain.",
    "Limit per_page and use timeouts to minimize operational footprint."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1597-7be75a85-4f578265",
  "source_prompt_hash": "7be75a85",
  "timestamp_utc": "2025-09-30T06:36:34.534600Z",
  "validation": {
    "syntax_ok": null,
    "llm_judge": null,
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}