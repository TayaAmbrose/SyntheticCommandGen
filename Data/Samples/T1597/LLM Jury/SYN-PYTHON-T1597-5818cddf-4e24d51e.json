{
  "technique_id": "T1597",
  "platform": "Kubernetes",
  "shell": "Python",
  "command": "import os, json, logging, sys\nfrom kubernetes import client, config\nfrom kubernetes.stream import stream\n\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')\nns = os.getenv('KUBE_NAMESPACE', 'default')\npod = os.getenv('KUBE_POD', 'util-python-0')\ncontainer = os.getenv('KUBE_CONTAINER')\ntry:\n    try:\n        config.load_incluster_config()\n    except Exception:\n        config.load_kube_config()\n    v1 = client.CoreV1Api()\n    inner = \"import os, sys, json, logging, requests, base64; logging.basicConfig(level=logging.INFO); api_id=os.environ['CENSYS_API_ID']; api_secret=os.environ['CENSYS_API_SECRET']; q=os.environ.get('CENSYS_QUERY','services.tls.certificates.leaf_data.names:example.com'); url='https://search.censys.io/api/v2/hosts/search'; payload={'q': q, 'per_page': 25};\\ntry:\\n    r=requests.post(url, json=payload, auth=(api_id, api_secret), timeout=20); r.raise_for_status(); print(json.dumps({'source':'censys','query':q,'data':r.json()}))\\nexcept Exception as e:\\n    print(json.dumps({'source':'censys','query':q,'error':str(e)})); sys.exit(1)\"\n    resp = stream(v1.connect_get_namespaced_pod_exec, pod, ns, command=['python3','-c', inner], container=container, stderr=True, stdin=False, stdout=True, tty=False)\n    print(resp)\nexcept Exception as e:\n    logging.error('collection_failed', exc_info=e); sys.exit(1)\n",
  "explanation": "Performs a targeted search in the closed-source Censys dataset for hosts with certificates matching the target, using authenticated API access and returning JSON.",
  "rationale_steps": [
    "Authenticate to Censys with API ID/secret to query its proprietary index.",
    "Limit results per page to reduce noise while collecting relevant certificate-based matches."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1597-5818cddf-4e24d51e",
  "source_prompt_hash": "5818cddf",
  "timestamp_utc": "2025-09-30T06:41:43.112780Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The command is perfectly well-formed Python code with proper imports, exception handling, balanced quotes/parentheses/braces, and correct string formatting for the embedded Python script.",
        "semantic_score": 5,
        "semantic_justification": "The command perfectly aligns with T1597 (Search Closed Sources) by using authenticated API access to query the closed-source Censys database for specific certificate information, which is a paid intelligence source commonly used for reconnaissance.",
        "combined_score": 5.0,
        "confidence": 0.95,
        "timestamp": "2025-10-02T13:37:20.110047Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The Python script is perfectly well-formed with correct imports, variable assignments, try-except blocks, function calls, and proper string encapsulation for the inner script executed within the Kubernetes pod.",
        "semantic_score": 5,
        "semantic_justification": "The command accurately implements T1597 by querying the closed-source Censys API with authentication for specific certificate data, aligning perfectly with acquiring non-public intelligence for targeting.",
        "combined_score": 5.0,
        "confidence": 1,
        "timestamp": "2025-10-02T13:37:31.776946Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "Well-formed Python with balanced quoting and valid Kubernetes client usage; no syntax or parsing errors.",
        "semantic_score": 5,
        "semantic_justification": "Executes an authenticated query against the closed-source Censys API to search for hosts by certificate names, aligning directly with T1597 Search Closed Sources.",
        "combined_score": 5.0,
        "confidence": 0.9,
        "timestamp": "2025-10-02T13:37:48.884358Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 5.0,
    "llm_average_score": 5.0,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}