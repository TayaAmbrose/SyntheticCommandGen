{
  "technique_id": "T1597",
  "platform": "Cloud",
  "shell": "Python",
  "command": "import boto3, json, logging, requests\nfrom requests.auth import HTTPBasicAuth\nlogging.basicConfig(level=logging.INFO)\nsecrets = boto3.client('secretsmanager')\ns3 = boto3.client('s3')\ncreds = json.loads(secrets.get_secret_value(SecretId='riskiq/basic')['SecretString'])\nuser, pwd = creds['username'], creds['password']\ndomain = 'example.com'\nurl = 'https://api.riskiq.net/pt/v2/dns/passive'\nparams = {'query': domain, 'size': 100}\ntry:\n    r = requests.get(url, params=params, auth=HTTPBasicAuth(user, pwd), headers={'Accept': 'application/json', 'User-Agent': 'cloud-intel-client/1.0'}, timeout=10)\n    r.raise_for_status()\n    data = r.json()\n    bucket = 'intel-results-bucket-123456'; key = f'riskiq/{domain}_passivedns.json'\n    s3.put_object(Bucket=bucket, Key=key, Body=json.dumps({'source': 'riskiq', 'domain': domain, 'result': data}), ContentType='application/json')\n    print(json.dumps({'source': 'riskiq', 'requestUrl': r.url, 's3Uri': f's3://{bucket}/{key}'}))\nexcept Exception as e:\n    logging.exception('RiskIQ PassiveTotal query failed: %s', e)",
  "explanation": "Queries RiskIQ PassiveTotal (a paid passive DNS dataset) for records associated with the target domain and stores the JSON results in S3. This is closed-source data collection for reconnaissance.",
  "rationale_steps": [
    "Retrieve subscription credentials from Secrets Manager to avoid hardcoding secrets.",
    "Limit result size to reduce noise and API consumption.",
    "Store results in a structured, auditable format in S3."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1597-a61c7e92-bcacb81d",
  "source_prompt_hash": "a61c7e92",
  "timestamp_utc": "2025-09-30T06:45:01.363013Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The Python code is perfectly well-formed with proper syntax, balanced quotes/parentheses/braces, correct exception handling, and appropriate function calls to the boto3 and requests libraries.",
        "semantic_score": 5,
        "semantic_justification": "The command perfectly aligns with T1597 (Search Closed Sources) as it queries RiskIQ PassiveTotal (a paid threat intelligence service) for DNS information about a domain, retrieves credentials from AWS Secrets Manager, and stores the results in S3.",
        "combined_score": 5.0,
        "confidence": 0.95,
        "timestamp": "2025-10-02T12:48:29.917856Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The Python code is perfectly well-formed, with correct imports, variable assignments, function calls, control flow, and no syntax errors.",
        "semantic_score": 5,
        "semantic_justification": "The command perfectly queries a recognized paid closed-source intelligence platform (RiskIQ PassiveTotal) for reconnaissance data and stores it, directly aligning with T1597's description of acquiring non-public information.",
        "combined_score": 5.0,
        "confidence": 1,
        "timestamp": "2025-10-02T12:48:35.672302Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "Valid Python script with balanced syntax, proper imports, and runnable structure.",
        "semantic_score": 5,
        "semantic_justification": "Authenticates to a paid RiskIQ PassiveTotal API to query passive DNS for a domain and stores the results in S3, aligning with closed-source collection under T1597.",
        "combined_score": 5.0,
        "confidence": 1,
        "timestamp": "2025-10-02T12:48:37.133360Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 5.0,
    "llm_average_score": 5.0,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}