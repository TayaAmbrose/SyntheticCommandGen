{
  "technique_id": "T1597",
  "platform": "Linux",
  "shell": "Python",
  "command": "import os,sys,json,ssl,urllib.request,urllib.parse; d=os.getenv('TARGET_DOMAIN','example.com'); k=os.getenv('BUILTWITH_API_KEY'); \nif not k: print(json.dumps({'source':'builtwith','query':d,'error':'missing BUILTWITH_API_KEY'}), file=sys.stderr); sys.exit(1); \nurl='https://api.builtwith.com/v21/api.json?KEY='+urllib.parse.quote(k)+'&LOOKUP='+urllib.parse.quote(d); ctx=ssl.create_default_context(); hdr={'Accept':'application/json','User-Agent':'t1597-demo/1.0'}; \ntry:\n    r=urllib.request.urlopen(urllib.request.Request(url,headers=hdr),timeout=20,context=ctx); print(json.dumps({'source':'builtwith','query':d,'data':json.loads(r.read().decode('utf-8'))}, ensure_ascii=False));\nexcept Exception as e:\n    print(json.dumps({'source':'builtwith','query':d,'error':str(e)}), file=sys.stderr); sys.exit(2)",
  "explanation": "Queries the commercial BuiltWith API to identify technologies used by the target domain, authenticated with an API key.",
  "rationale_steps": [
    "Use a paid technology profiling service (BuiltWith) to gather stack data.",
    "Pass API key via environment to avoid disclosure in logs.",
    "Return JSON and enforce timeouts to reduce noise."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1597-7be75a85-4dc6ede6",
  "source_prompt_hash": "7be75a85",
  "timestamp_utc": "2025-09-30T06:36:34.534600Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The Python code is perfectly well-formed with proper syntax, balanced quotes, correct exception handling, and appropriate use of libraries and functions.",
        "semantic_score": 5,
        "semantic_justification": "The command directly implements T1597 (Search Closed Sources) by querying the commercial BuiltWith API with proper authentication to gather intelligence about technologies used by a target domain, which is precisely the technique described.",
        "combined_score": 5.0,
        "confidence": 0.95,
        "timestamp": "2025-10-02T11:44:39.527464Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The Python command is perfectly well-formed with correct syntax, balanced delimiters, proper function calls, and error handling, making it runnable as a single-line script.",
        "semantic_score": 5,
        "semantic_justification": "The command perfectly aligns with T1597 by querying a commercial, closed-source technical intelligence API (BuiltWith) to gather reconnaissance, which is operationally plausible for adversarial targeting.",
        "combined_score": 5.0,
        "confidence": 1,
        "timestamp": "2025-10-02T11:44:46.999895Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "Well-formed Python with balanced structures and a valid try/except block that will parse and run as a script.",
        "semantic_score": 5,
        "semantic_justification": "Authenticates to and queries the commercial BuiltWith API to gather non-public technology data on a domain, aligning with T1597 closed-source collection.",
        "combined_score": 5.0,
        "confidence": 1,
        "timestamp": "2025-10-02T11:44:58.862893Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 5.0,
    "llm_average_score": 5.0,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}