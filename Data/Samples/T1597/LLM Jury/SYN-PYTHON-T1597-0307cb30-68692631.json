{
  "technique_id": "T1597",
  "platform": "Linux",
  "shell": "Python",
  "command": "python3 -c 'import os,sys,json,http.client; dom=os.environ.get(\"TARGET_DOMAIN\",\"example.com\"); key=os.environ[\"SSC_API_KEY\"]; c=http.client.HTTPSConnection(\"api.securityscorecard.io\",timeout=15); h={\"Authorization\":\"Token \"+key,\"Accept\":\"application/json\"}; c.request(\"GET\",\"/companies/\"+dom,headers=h); r=c.getresponse(); b=r.read();\ntry:\n j=json.loads(b.decode());\nexcept Exception:\n j={\"raw\":b.decode(\"utf-8\",\"ignore\")};\nif r.status==200:\n print(json.dumps(j))\nelse:\n sys.stderr.write(f\"HTTP {r.status} {r.reason}: \"+(b[:200].decode(\"utf-8\",\"ignore\"))+\"\\n\"); sys.exit(1)'\n",
  "explanation": "Retrieves organization security ratings/intelligence from SecurityScorecard (subscription) for the target domain via HTTPS.",
  "rationale_steps": [
    "Use token-based Authorization header sourced from environment variables.",
    "GET company/scorecard data for the domain.",
    "Return parsed JSON and handle HTTP/parse errors gracefully."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1597-0307cb30-68692631",
  "source_prompt_hash": "0307cb30",
  "timestamp_utc": "2025-09-30T06:31:45.744266Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The Python one-liner is perfectly well-formed with balanced quotes, parentheses, and braces, proper exception handling, and valid Python syntax throughout.",
        "semantic_score": 5,
        "semantic_justification": "The command directly implements T1597 (Search Closed Sources) by querying SecurityScorecard's paid API service using an API key to gather security intelligence about a target domain, which aligns perfectly with the technique of acquiring intelligence from non-public/paid sources.",
        "combined_score": 5.0,
        "confidence": 0.95,
        "timestamp": "2025-10-02T11:38:14.720129Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The Python code is perfectly well-formed, uses correct syntax for imports, assignments, function calls, exception handling, and control flow within a single-line execution.",
        "semantic_score": 5,
        "semantic_justification": "The command directly queries a commercial, subscription-based security intelligence API (SecurityScorecard), which perfectly aligns with the definition of T1597 to acquire non-public information from a closed source for targeting intelligence.",
        "combined_score": 5.0,
        "confidence": 1,
        "timestamp": "2025-10-02T11:38:21.005124Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "The Python one-liner is well-formed with balanced quoting, proper block indentation for try/except and if/else, and valid request construction.",
        "semantic_score": 5,
        "semantic_justification": "It authenticates to SecurityScorecard\u2019s closed API and retrieves organization data for a target domain, matching T1597\u2019s querying of non-public paid sources.",
        "combined_score": 5.0,
        "confidence": 0.9,
        "timestamp": "2025-10-02T11:38:43.891217Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 5.0,
    "llm_average_score": 5.0,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}