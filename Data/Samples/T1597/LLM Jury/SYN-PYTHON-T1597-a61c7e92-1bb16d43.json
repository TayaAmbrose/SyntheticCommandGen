{
  "technique_id": "T1597",
  "platform": "Cloud",
  "shell": "Python",
  "command": "import boto3, json, logging, re, requests\nlogging.basicConfig(level=logging.INFO)\nsecrets = boto3.client('secretsmanager')\ns3 = boto3.client('s3')\napi_key = json.loads(secrets.get_secret_value(SecretId='whoisxml/api')['SecretString'])['api_key']\ndomain = 'example.com'\nif not re.match(r'^[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$', domain):\n    raise SystemExit('Invalid domain format')\nurl = 'https://www.whoisxmlapi.com/whoisserver/WhoisService'\nparams = {'apiKey': api_key, 'domainName': domain, 'outputFormat': 'json'}\nbucket = 'intel-results-bucket-123456'\nkey = f'whoisxml/{domain}.json'\ntry:\n    r = requests.get(url, params=params, headers={'User-Agent': 'cloud-intel-client/1.0'}, timeout=10)\n    r.raise_for_status()\n    s3.put_object(Bucket=bucket, Key=key, Body=json.dumps({'source': 'whoisxml', 'domain': domain, 'result': r.json()}), ContentType='application/json')\n    print(json.dumps({'source': 'whoisxml', 'requestUrl': r.url, 's3Uri': f's3://{bucket}/{key}'}))\nexcept Exception as e:\n    logging.exception('WHOISXML lookup failed: %s', e)",
  "explanation": "Pulls WHOIS records for a target domain from WhoisXML, a closed-source subscription service, using credentials stored in AWS Secrets Manager. Results are stored as JSON in S3.",
  "rationale_steps": [
    "Validate target domain format to avoid noisy/invalid requests.",
    "Use a reputable closed-source WHOIS provider via authenticated HTTPS.",
    "Store results in structured JSON for reliable processing."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1597-a61c7e92-1bb16d43",
  "source_prompt_hash": "a61c7e92",
  "timestamp_utc": "2025-09-30T06:45:01.363013Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The Python code is perfectly well-formed with proper imports, variable definitions, error handling, balanced parentheses/braces, and follows standard Python syntax conventions.",
        "semantic_score": 5,
        "semantic_justification": "The code directly implements the T1597 technique by querying WhoisXML API (a closed source requiring paid access), securely retrieving API credentials from AWS Secrets Manager, validating input, handling errors appropriately, and storing intelligence results in S3 for later use.",
        "combined_score": 5.0,
        "confidence": 0.95,
        "timestamp": "2025-10-02T11:54:25.985745Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The Python code is perfectly well-formed with no syntax errors, balanced structures, or invalid constructs; it is ready to run.",
        "semantic_score": 5,
        "semantic_justification": "The command perfectly aligns with T1597 by programmatically querying a 'closed-source subscription service' (WhoisXML) for intelligence (WHOIS records) using stored credentials, and then storing the collected data, which directly matches the technique's description.",
        "combined_score": 5.0,
        "confidence": 1,
        "timestamp": "2025-10-02T11:54:34.326786Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "Valid Python 3 code with balanced structures, correct imports, proper f-strings, and no syntax errors.",
        "semantic_score": 5,
        "semantic_justification": "It queries the paid WhoisXML API using a secret from AWS Secrets Manager and stores results in S3, aligning with T1597 closed-source collection.",
        "combined_score": 5.0,
        "confidence": 0.9,
        "timestamp": "2025-10-02T11:54:45.236094Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 5.0,
    "llm_average_score": 5.0,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}