{
  "technique_id": "T1205",
  "platform": "Network Devices",
  "shell": "Bash",
  "command": "sudo ethtool -s eth0 wol a && sudo python3 -c \"from scapy.all import *; send(ARP(pdst='192.0.2.55', psrc='192.0.2.66', hwsrc='00:11:22:33:44:55'), verbose=False)\"",
  "explanation": "Configures the NIC to wake on ARP and then transmits a crafted ARP packet to act as the covert wake signal on the segment. Administrator rights are needed for ethtool. Detection: watch for ethtool WoL mode changes and anomalous ARP storms or spoofed ARP from unusual hosts.",
  "rationale_steps": [
    "Enable WoL on ARP frames (wol a) via ethtool (sudo).",
    "Use Scapy to generate a specific ARP frame as the trigger.",
    "Deliver the ARP to the device to activate behavior.",
    "Detection: ARP inspection for spoofed psrc/hwsrc and config monitoring of NIC WoL modes."
  ],
  "obfuscation_level": "none",
  "id": "SYN-BASH-T1205-bba1a632-ab2edc52",
  "source_prompt_hash": "bba1a632",
  "timestamp_utc": "2025-09-30T05:49:31.290544Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "Properly quoted and chained with &&, valid ethtool wol flag, and a balanced Python -c snippet with correct parentheses and quoting.",
        "semantic_score": 4,
        "semantic_justification": "It uses ethtool to enable ARP-based WoL and Scapy to emit a crafted ARP as a signaling packet (aligned with T1205), though the WoL change applies only locally and using send() for ARP plus the immediate self-sent signal makes operational context somewhat idealized.",
        "combined_score": 4.5,
        "confidence": 0.79,
        "timestamp": "2025-10-01T19:43:47.663562Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 4.0,
    "llm_average_score": 4.5,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}