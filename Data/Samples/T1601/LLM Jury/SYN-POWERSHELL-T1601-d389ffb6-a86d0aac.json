{
  "technique_id": "T1601",
  "platform": "Network Devices",
  "shell": "Powershell",
  "command": "$img = \"C:\\ProgramData\\NetOS\\images\\system.img\"; $expMD5 = (Get-Content \"$img.md5\").Trim().ToLower(); $expSHA = (Get-Content \"$img.sha256\").Trim().ToLower(); $aMD5 = (Get-FileHash -Algorithm MD5 -Path $img).Hash.ToLower(); $aSHA = (Get-FileHash -Algorithm SHA256 -Path $img).Hash.ToLower(); if ($aMD5 -ne $expMD5 -or $aSHA -ne $expSHA) { Write-Error \"Hash mismatch: MD5 or SHA256 incorrect\" } else { Write-Output \"MD5 and SHA256 match expected values\" }",
  "explanation": "Performs dual-hash verification (MD5 and SHA256) of the system image against stored checksums to increase confidence in integrity checks.",
  "rationale_steps": [
    "Load expected MD5 and SHA256 values from admin-protected checksum files.",
    "Compute both MD5 and SHA256 with Get-FileHash.",
    "Compare actual and expected values.",
    "Report any discrepancy to highlight unauthorized changes."
  ],
  "obfuscation_level": "none",
  "id": "SYN-POWERSHELL-T1601-d389ffb6-a86d0aac",
  "source_prompt_hash": "d389ffb6",
  "timestamp_utc": "2025-09-30T04:38:26.610534Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The PowerShell command is perfectly well-formed with proper variable assignments, method calls, balanced parentheses/braces, correct string comparisons, and proper conditional structure.",
        "semantic_score": 5,
        "semantic_justification": "The command perfectly implements a dual-hash verification system that checks both MD5 and SHA256 hashes of a system image against expected values stored in separate files, which directly addresses the integrity validation aspect of mitigating T1601 (Modify System Image).",
        "combined_score": 5.0,
        "confidence": 0.95,
        "timestamp": "2025-10-02T19:25:11.093221Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The command is perfectly well-formed, using valid PowerShell cmdlets, operators, variable assignments, and control flow with balanced parentheses and quotes.",
        "semantic_score": 5,
        "semantic_justification": "The command perfectly aligns with the T1601 technique's mitigation strategy of performing integrity and checksum validation to detect image modification, achieving its stated intent of dual-hash verification in an operationally plausible manner.",
        "combined_score": 5.0,
        "confidence": 1,
        "timestamp": "2025-10-02T19:25:17.686056Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "Valid PowerShell one-liner with balanced quotes and braces, correct cmdlets/properties, and proper statement separators.",
        "semantic_score": 2,
        "semantic_justification": "It performs integrity verification rather than modifying a system image (T1601) and assumes PowerShell on network devices, which is unrealistic for that platform.",
        "combined_score": 3.5,
        "confidence": 0.9,
        "timestamp": "2025-10-02T19:25:32.146599Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 4.0,
    "llm_average_score": 4.5,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}