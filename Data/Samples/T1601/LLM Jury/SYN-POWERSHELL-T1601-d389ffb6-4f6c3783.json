{
  "technique_id": "T1601",
  "platform": "Network Devices",
  "shell": "Powershell",
  "command": "$manifest = \"C:\\ProgramData\\NetOS\\baseline\\image_manifest.sha256\"; Get-Content $manifest | ForEach-Object { if ($_.Trim()) { $parts = $_.Trim() -split '\\s+', 2; $expected = $parts[0].ToUpper(); $path = $parts[1]; $actual = (Get-FileHash -Algorithm SHA256 -Path $path).Hash.ToUpper(); if ($actual -ne $expected) { Write-Error \"Mismatch: $path\" } } }",
  "explanation": "Validates a set of critical image components against a baseline manifest of expected hashes to detect unauthorized system image modifications.",
  "rationale_steps": [
    "Load a privileged baseline manifest mapping files to expected SHA256 values.",
    "Iterate each entry and compute the actual SHA256 via Get-FileHash.",
    "Compare expected vs actual for each file.",
    "Flag any file that fails integrity verification."
  ],
  "obfuscation_level": "none",
  "id": "SYN-POWERSHELL-T1601-d389ffb6-4f6c3783",
  "source_prompt_hash": "d389ffb6",
  "timestamp_utc": "2025-09-30T04:38:26.610534Z",
  "validation": {
    "syntax_ok": null,
    "llm_judgments": [
      {
        "model": "claude-3-7-sonnet",
        "syntactic_score": 5,
        "syntactic_justification": "The PowerShell command is perfectly well-formed with proper variable assignment, pipeline usage, balanced quotes/braces, correct method calls, and appropriate error handling.",
        "semantic_score": 4,
        "semantic_justification": "The command effectively implements a file integrity check against a baseline manifest which aligns with detecting T1601 (Modify System Image), but it's running in PowerShell which is unusual for network device firmware validation rather than using platform-specific tools.",
        "combined_score": 4.5,
        "confidence": 0.9,
        "timestamp": "2025-10-02T17:42:12.015808Z"
      },
      {
        "model": "gemini-2.0-flash-thinking-exp",
        "syntactic_score": 5,
        "syntactic_justification": "The Powershell command is perfectly well-formed with correct syntax, balanced elements, valid cmdlet usage, and proper operator/method calls.",
        "semantic_score": 4,
        "semantic_justification": "The command accurately implements a hash validation mechanism to detect unauthorized modifications, directly aligning with T1601 detection; however, the 'Privilege: None' claim is a minor realism gap, as accessing typical 'critical image components' on a system often requires elevated read permissions, potentially impacting operational plausibility.",
        "combined_score": 4.5,
        "confidence": 1,
        "timestamp": "2025-10-02T17:42:32.067973Z"
      },
      {
        "model": "gpt-5",
        "syntactic_score": 5,
        "syntactic_justification": "PowerShell command is well-formed with balanced quotes/braces, valid operators, and proper statement separators.",
        "semantic_score": 4,
        "semantic_justification": "It computes SHA-256 hashes from a manifest and flags mismatches to detect image tampering, but assumes a Windows/PowerShell environment and accessible paths on a network device with no privilege requirements, which may not be realistic.",
        "combined_score": 4.5,
        "confidence": 0.8,
        "timestamp": "2025-10-02T17:42:42.097310Z"
      }
    ],
    "llm_average_syntactic": 5.0,
    "llm_average_semantic": 4.0,
    "llm_average_score": 4.5,
    "llm_verdict": "likely_match",
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}