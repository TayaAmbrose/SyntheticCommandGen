{
  "technique_id": "T1601",
  "platform": "Network Devices",
  "shell": "Python",
  "command": "python3 - <<'PY'\nimport os, sys, filecmp, hashlib, datetime, json\ncur = \"/boot/flash/system.img\"\ngold = \"/opt/golden/system.img\"\nif os.geteuid() != 0:\n    sys.exit(\"root required\")\n\ndef sha256(p):\n    h = hashlib.sha256()\n    with open(p, 'rb') as f:\n        for b in iter(lambda: f.read(1<<20), b''):\n            h.update(b)\n    return h.hexdigest()\n\nsame = filecmp.cmp(cur, gold, shallow=False)\nrec = {\n    \"timestamp\": datetime.datetime.utcnow().isoformat() + \"Z\",\n    \"current\": cur,\n    \"golden\": gold,\n    \"match\": same,\n    \"current_sha256\": sha256(cur),\n    \"golden_sha256\": sha256(gold)\n}\nwith open(\"/var/log/firmware_integrity.log\", \"a\") as log:\n    log.write(json.dumps(rec) + \"\\n\")\nprint(\"OK\" if same else \"MISMATCH\")\nPY",
  "explanation": "Compares the current system image to a golden reference using filecmp and records SHA-256 hashes to a privileged log, enabling detection of unauthorized image changes.",
  "rationale_steps": [
    "Require root to access protected image paths and write to system logs.",
    "Use filecmp.cmp to check binary equality of the system image and golden image.",
    "Compute SHA-256 for both images and append a JSON record to /var/log/firmware_integrity.log."
  ],
  "obfuscation_level": "none",
  "id": "SYN-PYTHON-T1601-0c03443f-fe282e46",
  "source_prompt_hash": "0c03443f",
  "timestamp_utc": "2025-09-30T04:56:19.919567Z",
  "validation": {
    "syntax_ok": null,
    "llm_judge": null,
    "sandbox_trace_id": null,
    "mitre_match_score": null
  }
}